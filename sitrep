#!/usr/bin/php
<?php

/*
 * sitrep v1.2.3 
 *
 * http://sitrep.danallan.net
 *
 * Dan Armendariz
 * danallan@mit.edu
 *
 * A command line program for Linux and Mac OS X to notify a user via the 
 * Notifo service: http://notifo.com
 *
 * === Usage ===
 *
 * The first time you use sitrep on a machine, call it with no options, like:
 *   sitrep
 * To run setup and get everything ready. You can rerun setup at anytime with:
 *   sitrep --setup
 *
 * By default, the message will be sent with the hostname of the machine on 
 * which it is run as the label.
 *
 * Any of the following will send the message "this is a message".  
 *   sitrep "this is a message"
 *   sitrep this is a message
 *   echo "this is a message" | sitrep
 *   echo "lots of data" | sitrep this is a message
 *
 * All cases will return a publicly-accessible URL of the sitrep for sharing 
 * or documentation.
 * 
 * If data is piped to sitrep, it's packaged as a payload and delivered to the
 * user via URL. Only the last line of the payload or the message passed by
 * parameter will be used as the message of the notification.
 *
 */


// define a file that will contain authentication pair
define("DOTFILE", $_SERVER['HOME']."/.sitrep");

// separates usernames from keys in the dotfile
define("PIPE", "|");

// valid chars for users/keys (suitable for a regex char class)
define("VALID", "A-Za-z0-9_\.\-");

// the sitrep server URL
define("URL", "http://sitrep.danallan.net/msg.php");

// ANSI colors
define("GREEN", "\033[1;32m");
define("RED",   "\033[1;31m");
define("CLEAR", "\033[0m");


  /////////
 // Setup and fetching the authenticaion pair
/////////

// does the user want to run setup?
if ($argc > 1 && $argv['1'] == "--setup")
    setup("Re-running setup at your request.");

// a variable for our authentication pair
$pair = null;

// first let's see if our configuration file exists
if (@file_exists(DOTFILE) == false)
    setup("Welcome to SITREP! Let's get you started.");

// does exist! let's try to pull the data from it and validate it
if (($pair = @file_get_contents(DOTFILE)) === false || 
    !is_array($pair = explode(PIPE, $pair)))
    setup("SITREP configuration file cannot be read, please re-setup:");


  /////////
 // Generate the notification
/////////

// default message and payload
$msg = "Dradis contact";
$payload = array();

// see if the user wants the message to come via pipe
 // we're using an ugly ugly hack here; PHP 5.1 doesn't properly return false
 // for ftell(STDIN) if no data was piped, so we're relying also on the gid of
 // the data from stdin to tell us if there is any.
$stat = fstat(STDIN); 
if (ftell(STDIN) === 0 && $stat['gid'] == posix_getegid()) {
    // data provided by stdin: echo it back out and remember data
    while ($line = fgets(STDIN)) echo ($payload[] = $line);
}

// fetch last line of stdin
if(trim(end($payload)) != "") $msg = end($payload);

// use message passed via param
if($argc > 1) $msg = implode(" ", array_slice($argv, 1)); 

$data = array(
    "user"    => $pair[0],
    "key"     => $pair[1],
    "title"   => php_uname("n"),
    "msg"     => $msg,
    "payload" => implode("",$payload));


  /////////
 // Send the notification
/////////

echo "Sending SITREP, please wait..\n";

$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, URL);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($data));
curl_setopt($curl, CURLOPT_HEADER, false);

$r = curl_exec($curl);

  /////////
 // Output the result of our transmission
/////////

// uh oh, some transmission error
if($r === false) msg(false, "Cannot send data to sitrep server.");

// decode the response
$r = @json_decoder($r);

// check for decode problem
if($r == null) msg(false, "Unknown response from sitrep server.");
else {
    // iterate over each notification the server sent
    foreach($r['n'] as $n) {
        if(isset($n['status']) && $n['status'] == "success")
            msg(true, "", $n['u'], false);
        else
            msg(false, $n['response_message'], $n['u'], false);
    }   
    echo "SITREP URL: ".urldecode($r['h'])."\n";
}


  /////////
 // Functions
/////////

/** setup()
  * input: $msg message string
  * Queries for and writes the user's authorization pair to the dotfile
  */
function setup($msg) {
    echo "$msg\n\n";

    echo "Enter your callsign: ";
    $callsign = preg_replace('/[^'.VALID.']/','',fgets(STDIN));
 
    echo "Enter your sitrep key: ";
    $key = preg_replace('/[^'.VALID.']/','',fgets(STDIN));

    // attempt to write config file, and notify user of result
    if(@file_put_contents(DOTFILE, $callsign.PIPE.$key))
        echo colorize("Setup complete!", GREEN);
    else
        echo colorize("Could not complete setup", RED).
             ": could not store data in ".DOTFILE;
    echo "\n";

    exit;
}

/** msg()
  * input: $success completion status, $msg message string, $user string, $quit
  * Print a notification status message to the console, quitting afterwards
  * by default (but provide an option to continue processing).
  */
function msg($success, $msg, $user = null, $quit = true) {
    echo "SITREP ".(($user != null) ? "to $user " : "").
         (($success) ? colorize("sent! ", GREEN) : colorize("failed: ", RED)).
        $msg."\n";
    
    if($quit) exit;
}

/** colorize()
  * input: $msg string to color with selected ANSI $color code
  * Returns an ANSI-colored string with a color reset sequence at the end.
  */
function colorize($msg, $color) { return $color.$msg.CLEAR; }

/** json_decoder()
  * input: $json string
  * output: PHP associative array from json object
  * Some older PHP installs don't have json_decode()..
  * modified from http://us2.php.net/manual/en/function.json-decode.php#100740
  */
function json_decoder($json) {
    if(function_exists('json_decode')) return json_decode($json, true);
    $comment = false;
    $out = '$x=';
    for ($i=0; $i<strlen($json); $i++) {
        if (!$comment) {
            if      (($json[$i]=='{') || ($json[$i]=='[')) $out .= ' array(';
            else if (($json[$i]=='}') || ($json[$i]==']')) $out .= ')';
            else if  ($json[$i]==':')                      $out .= '=>';
            else                                           $out .= $json[$i];          
        }
        else $out .= $json[$i];
        if ($json[$i] == '"' && $json[($i-1)]!="\\") $comment = !$comment;
    }
    eval($out . ';');
    return $x;
}

?>
